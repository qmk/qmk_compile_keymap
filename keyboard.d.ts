/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type McuPinArray = ("NO_PIN" | string | number | null)[];
/**
 * @minItems 1
 */
export type KeycodeDeclArray = [KeycodeDecl, ...KeycodeDecl[]];
/**
 * @minItems 2
 * @maxItems 2
 */
export type McuPinArray1 = ["NO_PIN" | string | number | null, "NO_PIN" | string | number | null];

export interface KeyboardInformation {
  keyboard_name?: string;
  keyboard_folder?: string;
  maintainer?: string;
  manufacturer?: string;
  url?: string;
  development_board?:
    | "promicro"
    | "elite_c"
    | "elite_pi"
    | "proton_c"
    | "kb2040"
    | "promicro_rp2040"
    | "blok"
    | "michi"
    | "bit_c_pro"
    | "stemcell"
    | "bluepill"
    | "blackpill_f401"
    | "blackpill_f411"
    | "bonsai_c4"
    | "helios"
    | "liatris"
    | "imera";
  pin_compatible?: "promicro" | "elite_c";
  processor?:
    | "cortex-m0"
    | "cortex-m0plus"
    | "cortex-m3"
    | "cortex-m4"
    | "cortex-m7"
    | "cortex-m23"
    | "cortex-m33"
    | "cortex-m35p"
    | "cortex-m55"
    | "cortex-m85"
    | "MKL26Z64"
    | "MK20DX128"
    | "MK20DX256"
    | "MK64FX512"
    | "MK66FX1M0"
    | "RP2040"
    | "STM32F042"
    | "STM32F072"
    | "STM32F103"
    | "STM32F303"
    | "STM32F401"
    | "STM32F405"
    | "STM32F407"
    | "STM32F411"
    | "STM32F446"
    | "STM32G431"
    | "STM32G474"
    | "STM32H723"
    | "STM32H733"
    | "STM32L412"
    | "STM32L422"
    | "STM32L432"
    | "STM32L433"
    | "STM32L442"
    | "STM32L443"
    | "GD32VF103"
    | "WB32F3G71"
    | "WB32FQ95"
    | "atmega16u2"
    | "atmega32u2"
    | "atmega16u4"
    | "atmega32u4"
    | "at90usb162"
    | "at90usb646"
    | "at90usb647"
    | "at90usb1286"
    | "at90usb1287"
    | "atmega32a"
    | "atmega328p"
    | "atmega328"
    | "attiny85"
    | "unknown";
  apa102?: {
    data_pin?: "NO_PIN" | string | number | null;
    clock_pin?: "NO_PIN" | string | number | null;
    default_brightness?: number;
  };
  audio?: {
    default?: {
      on?: boolean;
      clicky?: boolean;
    };
    driver?: "dac_additive" | "dac_basic" | "pwm_software" | "pwm_hardware";
    macro_beep?: boolean;
    pins?: McuPinArray;
    power_control?: {
      on_state?: number;
      pin?: "NO_PIN" | string | number | null;
    };
    voices?: boolean;
  };
  backlight?: {
    driver?: "custom" | "pwm" | "software" | "timer";
    default?: {
      on?: boolean;
      breathing?: boolean;
      brightness?: number;
    };
    breathing?: boolean;
    breathing_period?: number;
    levels?: number;
    max_brightness?: number;
    pin?: "NO_PIN" | string | number | null;
    pins?: McuPinArray;
    on_state?: number;
    as_caps_lock?: boolean;
  };
  bluetooth?: {
    driver?: "bluefruit_le" | "custom" | "rn42";
  };
  bootmagic?: {
    enabled?: boolean;
    /**
     * @minItems 2
     * @maxItems 2
     */
    matrix?: [number, number];
  };
  board?: string;
  bootloader?:
    | "apm32-dfu"
    | "atmel-dfu"
    | "bootloadhid"
    | "caterina"
    | "custom"
    | "gd32v-dfu"
    | "halfkay"
    | "kiibohd"
    | "lufa-dfu"
    | "lufa-ms"
    | "md-boot"
    | "qmk-dfu"
    | "qmk-hid"
    | "rp2040"
    | "stm32-dfu"
    | "stm32duino"
    | "tinyuf2"
    | "uf2boot"
    | "unknown"
    | "usbasploader"
    | "wb32-dfu";
  /**
   * Instructions for putting the keyboard into a mode that allows for firmware flashing.
   */
  bootloader_instructions?: string;
  build?: {
    debounce_type?:
      | "asym_eager_defer_pk"
      | "custom"
      | "sym_defer_g"
      | "sym_defer_pk"
      | "sym_defer_pr"
      | "sym_eager_pk"
      | "sym_eager_pr";
    firmware_format?: "bin" | "hex" | "uf2";
    lto?: boolean;
  };
  diode_direction?: "COL2ROW" | "ROW2COL";
  debounce?: number;
  caps_word?: {
    enabled?: boolean;
    both_shifts_turns_on?: boolean;
    double_tap_shift_turns_on?: boolean;
    idle_timeout?: number;
    invert_on_shift?: boolean;
  };
  combo?: {
    count?: number;
    term?: number;
    [k: string]: unknown;
  };
  community_layouts?: string[];
  dip_switch?: DipSwitchConfig;
  eeprom?: {
    driver?: string;
    wear_leveling?: {
      driver?: "custom" | "embedded_flash" | "legacy" | "rp2040_flash" | "spi_flash";
      backing_size?: number;
      logical_size?: number;
    };
    [k: string]: unknown;
  };
  encoder?: EncoderConfig;
  features?: BooleanArray;
  indicators?: {
    caps_lock?: "NO_PIN" | string | number | null;
    num_lock?: "NO_PIN" | string | number | null;
    scroll_lock?: "NO_PIN" | string | number | null;
    compose?: "NO_PIN" | string | number | null;
    kana?: "NO_PIN" | string | number | null;
    on_state?: number;
    [k: string]: unknown;
  };
  joystick?: {
    enabled?: boolean;
    driver?: string;
    button_count?: number;
    axis_resolution?: number;
    axes?: {
      [k: string]:
        | {
            input_pin?: "NO_PIN" | string | number | null;
            low?: number;
            rest?: number;
            high?: number;
            [k: string]: unknown;
          }
        | "virtual";
    };
    [k: string]: unknown;
  };
  keycodes?: KeycodeDeclArray;
  layout_aliases?: {
    [k: string]:
      | (
          | "LAYOUT"
          | "LAYOUT_1x2uC"
          | "LAYOUT_1x2uL"
          | "LAYOUT_1x2uR"
          | "LAYOUT_2x2uC"
          | "LAYOUT_2x3uC"
          | "LAYOUT_625uC"
          | "LAYOUT_ortho_3x12_1x2uC"
          | "LAYOUT_ortho_4x12_1x2uC"
          | "LAYOUT_ortho_4x12_1x2uL"
          | "LAYOUT_ortho_4x12_1x2uR"
          | "LAYOUT_ortho_5x12_1x2uC"
          | "LAYOUT_ortho_5x12_2x2uC"
          | "LAYOUT_ortho_5x14_1x2uC"
          | "LAYOUT_ortho_5x14_1x2uL"
          | "LAYOUT_ortho_5x14_1x2uR"
          | "LAYOUT_planck_1x2uC"
          | "LAYOUT_planck_1x2uL"
          | "LAYOUT_planck_1x2uR"
          | "LAYOUT_preonic_1x2uC"
          | "LAYOUT_preonic_1x2uL"
          | "LAYOUT_preonic_1x2uR"
        )
      | string;
  };
  layouts?: {
    [k: string]: {
      filename?: string;
      c_macro?: boolean;
      json_layout?: boolean;
      layout?: {
        encoder?: number;
        label?: string;
        /**
         * @minItems 2
         * @maxItems 2
         */
        matrix?: [number, number];
        r?: number;
        rx?: number;
        ry?: number;
        h?: number;
        w?: number;
        x: number;
        y: number;
      }[];
    };
  };
  haptic?: {
    driver?: "drv2605l" | "solenoid";
    [k: string]: unknown;
  };
  leader_key?: {
    timing?: boolean;
    strict_processing?: boolean;
    timeout?: number;
    [k: string]: unknown;
  };
  matrix_pins?: {
    custom?: boolean;
    custom_lite?: boolean;
    ghost?: boolean;
    input_pressed_state?: number;
    io_delay?: number;
    direct?: McuPinArray[];
    cols?: McuPinArray;
    rows?: McuPinArray;
  };
  mouse_key?: {
    enabled?: boolean;
    delay?: number;
    interval?: number;
    max_speed?: number;
    time_to_max?: number;
    wheel_delay?: number;
    [k: string]: unknown;
  };
  oneshot?: {
    tap_toggle?: number;
    timeout?: number;
    [k: string]: unknown;
  };
  led_matrix?: {
    animations?: {
      [k: string]: boolean;
    };
    default?: {
      on?: boolean;
      animation?: string;
      val?: number;
      speed?: number;
    };
    driver?:
      | "custom"
      | "is31fl3218"
      | "is31fl3236"
      | "is31fl3729"
      | "is31fl3731"
      | "is31fl3733"
      | "is31fl3736"
      | "is31fl3737"
      | "is31fl3741"
      | "is31fl3742a"
      | "is31fl3743a"
      | "is31fl3745"
      | "is31fl3746a"
      | "snled27351";
    /**
     * @minItems 2
     * @maxItems 2
     */
    center_point?: [number, number];
    max_brightness?: number;
    timeout?: number;
    val_steps?: number;
    speed_steps?: number;
    led_flush_limit?: number;
    led_process_limit?: number;
    react_on_keyup?: boolean;
    sleep?: boolean;
    /**
     * @minItems 2
     * @maxItems 2
     */
    split_count?: [number, number];
    layout?: {
      /**
       * @minItems 2
       * @maxItems 2
       */
      matrix?: [number, number];
      x?: number;
      y?: number;
      flags?: number;
    }[];
    [k: string]: unknown;
  };
  rgb_matrix?: {
    animations?: {
      [k: string]: boolean;
    };
    default?: {
      on?: boolean;
      animation?: string;
      hue?: number;
      sat?: number;
      val?: number;
      speed?: number;
    };
    driver?:
      | "aw20216s"
      | "custom"
      | "is31fl3218"
      | "is31fl3236"
      | "is31fl3729"
      | "is31fl3731"
      | "is31fl3733"
      | "is31fl3736"
      | "is31fl3737"
      | "is31fl3741"
      | "is31fl3742a"
      | "is31fl3743a"
      | "is31fl3745"
      | "is31fl3746a"
      | "snled27351"
      | "ws2812";
    /**
     * @minItems 2
     * @maxItems 2
     */
    center_point?: [number, number];
    max_brightness?: number;
    timeout?: number;
    hue_steps?: number;
    sat_steps?: number;
    val_steps?: number;
    speed_steps?: number;
    led_flush_limit?: number;
    led_process_limit?: number;
    react_on_keyup?: boolean;
    sleep?: boolean;
    /**
     * @minItems 2
     * @maxItems 2
     */
    split_count?: [number, number];
    layout?: {
      /**
       * @minItems 2
       * @maxItems 2
       */
      matrix?: [number, number];
      x?: number;
      y?: number;
      flags?: number;
    }[];
    [k: string]: unknown;
  };
  rgblight?: {
    animations?: {
      [k: string]: boolean;
    };
    brightness_steps?: number;
    default?: {
      on?: boolean;
      animation?: string;
      hue?: number;
      sat?: number;
      val?: number;
      speed?: number;
    };
    driver?: "apa102" | "custom" | "ws2812";
    hue_steps?: number;
    layers?: {
      blink?: boolean;
      enabled?: boolean;
      max?: number;
      override_rgb?: boolean;
    };
    led_count?: number;
    /**
     * @minItems 2
     */
    led_map?: [number, number, ...number[]];
    max_brightness?: number;
    pin?: "NO_PIN" | string | number | null;
    rgbw?: boolean;
    saturation_steps?: number;
    sleep?: boolean;
    split?: boolean;
    /**
     * @minItems 2
     * @maxItems 2
     */
    split_count?: [number, number];
  };
  secure?: {
    enabled?: boolean;
    unlock_timeout?: number;
    idle_timeout?: number;
    /**
     * @minItems 1
     * @maxItems 5
     */
    unlock_sequence?:
      | [[number, number]]
      | [[number, number], [number, number]]
      | [[number, number], [number, number], [number, number]]
      | [[number, number], [number, number], [number, number], [number, number]]
      | [[number, number], [number, number], [number, number], [number, number], [number, number]];
  };
  stenography?: {
    enabled?: boolean;
    protocol?: "all" | "geminipr" | "txbolt";
  };
  ps2?: {
    enabled?: boolean;
    mouse_enabled?: boolean;
    clock_pin?: "NO_PIN" | string | number | null;
    data_pin?: "NO_PIN" | string | number | null;
    driver?: "busywait" | "interrupt" | "usart" | "vendor";
  };
  split?: {
    enabled?: boolean;
    bootmagic?: {
      /**
       * @minItems 2
       * @maxItems 2
       */
      matrix?: [number, number];
    };
    matrix_pins?: {
      right?: {
        direct?: McuPinArray[];
        cols?: McuPinArray;
        rows?: McuPinArray;
        unused?: McuPinArray;
      };
    };
    dip_switch?: {
      right?: DipSwitchConfig1;
    };
    encoder?: {
      right?: EncoderConfig1;
    };
    handedness?: {
      pin?: "NO_PIN" | string | number | null;
      matrix_grid?: McuPinArray1;
    };
    soft_serial_pin?: "NO_PIN" | string | number | null;
    soft_serial_speed?: number;
    serial?: {
      driver?: "bitbang" | "usart" | "vendor";
      pin?: "NO_PIN" | string | number | null;
    };
    transport?: {
      protocol?: "custom" | "i2c" | "serial";
      sync?: {
        activity?: boolean;
        detected_os?: boolean;
        haptic?: boolean;
        layer_state?: boolean;
        indicators?: boolean;
        matrix_state?: boolean;
        modifiers?: boolean;
        oled?: boolean;
        st7565?: boolean;
        wpm?: boolean;
      };
      watchdog?: boolean;
      watchdog_timeout?: number;
      sync_matrix_state?: boolean;
      sync_modifiers?: boolean;
    };
    usb_detect?: {
      enabled?: boolean;
      polling_interval?: number;
      timeout?: number;
    };
    main?: "eeprom" | "left" | "matrix_grid" | "pin" | "right";
    matrix_grid?: ("NO_PIN" | string | number | null)[];
  };
  tags?: string[];
  tapping?: {
    force_hold?: boolean;
    force_hold_per_key?: boolean;
    ignore_mod_tap_interrupt?: boolean;
    hold_on_other_key_press?: boolean;
    hold_on_other_key_press_per_key?: boolean;
    permissive_hold?: boolean;
    permissive_hold_per_key?: boolean;
    retro?: boolean;
    retro_per_key?: boolean;
    term?: number;
    term_per_key?: boolean;
    toggle?: number;
    [k: string]: unknown;
  };
  usb?: {
    device_ver?: string;
    device_version?: string;
    force_nkro?: boolean;
    pid?: string;
    vid?: string;
    max_power?: number;
    no_startup_check?: boolean;
    polling_interval?: number;
    shared_endpoint?: {
      keyboard?: boolean;
      mouse?: boolean;
    };
    suspend_wakeup_delay?: number;
    wait_for_enumeration?: boolean;
  };
  qmk?: {
    keys_per_scan?: number;
    tap_keycode_delay?: number;
    tap_capslock_delay?: number;
    locking?: {
      enabled?: boolean;
      resync?: boolean;
    };
  };
  qmk_lufa_bootloader?: {
    esc_output?: "NO_PIN" | string | number | null;
    esc_input?: "NO_PIN" | string | number | null;
    led?: "NO_PIN" | string | number | null;
    speaker?: "NO_PIN" | string | number | null;
  };
  ws2812?: {
    driver?: "bitbang" | "custom" | "i2c" | "pwm" | "spi" | "vendor";
    pin?: "NO_PIN" | string | number | null;
    rgbw?: boolean;
    i2c_address?: string;
    i2c_timeout?: number;
  };
  [k: string]: unknown;
}
export interface DipSwitchConfig {
  enabled?: boolean;
  /**
   * @minItems 1
   */
  matrix_grid?: [[number, number], ...[number, number][]];
  [k: string]: unknown;
}
export interface EncoderConfig {
  enabled?: boolean;
  [k: string]: unknown;
}
export interface BooleanArray {
  [k: string]: boolean;
}
export interface KeycodeDecl {
  key: string;
  label?: string;
  /**
   * @minItems 1
   */
  aliases?: [string, ...string[]];
  [k: string]: unknown;
}
export interface DipSwitchConfig1 {
  pins?: McuPinArray;
  [k: string]: unknown;
}
export interface EncoderConfig1 {
  driver?: "custom" | "quadrature";
  rotary?: {
    pin_a: "NO_PIN" | string | number | null;
    pin_b: "NO_PIN" | string | number | null;
    resolution?: number;
  }[];
  [k: string]: unknown;
}
